{"mappings":"ACGA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBAK5C,SAAS,IACP,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAc,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE9C,CAAA,EAAU,QAAQ,CAAG,GAPX,GAQV,EAAU,QAAQ,CAAG,GAPX,EAQV,EAAa,QAAQ,CAAG,GATd,GAUV,EAAa,QAAQ,CAAG,GATd,CAUZ,CAEA,EAAU,gBAAgB,CAAC,QAAS,WAGlC,GAAI,AAFa,EAAM,IAAI,CAAC,MAAM,CAdxB,GAgBU,CAIlB,IAAK,IAHC,EAAS,EAAM,SAAS,GACxB,EAAc,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAErC,EAAI,EAAG,EAAI,EAAa,IAC/B,EAAO,UAAU,GAGnB,GACF,CACF,GAEA,EAAU,gBAAgB,CAAC,QAAS,WAC9B,EAAM,IAAI,CAAC,MAAM,CA5BX,IA6BR,EAAM,SAAS,CAAC,IAChB,IAEJ,GAEA,EAAa,gBAAgB,CAAC,QAAS,WAGrC,GAAI,AAFgB,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CApCpC,GAsCa,CAChB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,GACF,CACF,GAEA,EAAa,gBAAgB,CAAC,QAAS,WACrC,GAAI,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CA/CpB,EA+C4B,CAC/B,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar table = document.querySelector(\"table\");\nvar appendRow = document.querySelector(\".append-row\");\nvar appendColumn = document.querySelector(\".append-column\");\nvar removeRow = document.querySelector(\".remove-row\");\nvar removeColumn = document.querySelector(\".remove-column\");\nvar max = 10;\nvar min = 2;\nfunction updateButtonState() {\n    var rowCount = table.rows.length;\n    var columnCount = table.rows[0].cells.length;\n    appendRow.disabled = rowCount >= max;\n    removeRow.disabled = rowCount <= min;\n    appendColumn.disabled = columnCount >= max;\n    removeColumn.disabled = columnCount <= min;\n}\nappendRow.addEventListener(\"click\", function() {\n    var rowCount = table.rows.length;\n    if (rowCount < max) {\n        var newRow = table.insertRow();\n        var columnCount = table.rows[0].cells.length;\n        for(var i = 0; i < columnCount; i++)newRow.insertCell();\n        updateButtonState();\n    }\n});\nremoveRow.addEventListener(\"click\", function() {\n    if (table.rows.length > min) {\n        table.deleteRow(-1);\n        updateButtonState();\n    }\n});\nappendColumn.addEventListener(\"click\", function() {\n    var columnCount = table.rows[0].cells.length;\n    if (columnCount < max) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.insertCell();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonState();\n    }\n});\nremoveColumn.addEventListener(\"click\", function() {\n    if (table.rows[0].cells.length > min) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtonState();\n    }\n});\n\n//# sourceMappingURL=index.66dd7cee.js.map\n","'use strict';\n\n// write code here\nconst table = document.querySelector('table');\nconst appendRow = document.querySelector('.append-row');\nconst appendColumn = document.querySelector('.append-column');\nconst removeRow = document.querySelector('.remove-row');\nconst removeColumn = document.querySelector('.remove-column');\n\nconst max = 10;\nconst min = 2;\n\nfunction updateButtonState() {\n  const rowCount = table.rows.length;\n  const columnCount = table.rows[0].cells.length;\n\n  appendRow.disabled = rowCount >= max;\n  removeRow.disabled = rowCount <= min;\n  appendColumn.disabled = columnCount >= max;\n  removeColumn.disabled = columnCount <= min;\n}\n\nappendRow.addEventListener('click', () => {\n  const rowCount = table.rows.length;\n\n  if (rowCount < max) {\n    const newRow = table.insertRow();\n    const columnCount = table.rows[0].cells.length;\n\n    for (let i = 0; i < columnCount; i++) {\n      newRow.insertCell();\n    }\n\n    updateButtonState();\n  }\n});\n\nremoveRow.addEventListener('click', () => {\n  if (table.rows.length > min) {\n    table.deleteRow(-1);\n    updateButtonState();\n  }\n});\n\nappendColumn.addEventListener('click', () => {\n  const columnCount = table.rows[0].cells.length;\n\n  if (columnCount < max) {\n    for (const row of table.rows) {\n      row.insertCell();\n    }\n\n    updateButtonState();\n  }\n});\n\nremoveColumn.addEventListener('click', () => {\n  if (table.rows[0].cells.length > min) {\n    for (const row of table.rows) {\n      row.deleteCell(-1);\n    }\n    updateButtonState();\n  }\n});\n"],"names":["table","document","querySelector","appendRow","appendColumn","removeRow","removeColumn","updateButtonState","rowCount","rows","length","columnCount","cells","disabled","addEventListener","newRow","insertRow","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.66dd7cee.js.map"}